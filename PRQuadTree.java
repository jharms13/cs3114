import java.util.List;

/**
 * An implementation of the Point Range Quad Tree Data Structure.
 * 
 * @author Reese Moore
 * @author Tyler Kahn
 * @version 2011.10.10
 */
public class PRQuadTree implements QuadTree {
	private int size;
	private PRQuadTreeNode root;
	
	/**
	 * Instantiate a new Quad Tree instance
	 * @param size The maximum dimensions of this Quad Tree
	 */
	public PRQuadTree(int size)
	{
		this.size = size;
		this.root = PRQuadTreeFlyWeight.getFlyWeight();
	}
	
	/**
	 * Insert data into the Quad Tree
	 * @param x The X coordinate of the data to insert.
	 * @param y The Y coordinate of the data to insert.
	 * @param data The data to insert.
	 * @return The success or failure of insertion.
	 */
	@Override
	public boolean insert(int x, int y, Handle data) {
		try {
			root = root.insert(x, y, data, 0, 0, size);
			return true;
		} catch (DuplicateEntryException dee) {
			return false;
		}
	}

	/**
	 * Remove some data from the Quad Tree
	 * @param x The X coordinate of the data to remove.
	 * @param y The Y coordinate of the data to remove.
	 * @return The removed data or null.
	 */
	@Override
	public Handle remove(int x, int y) {
		Handle[] data = new Handle[1];
		root = root.remove(x, y, data, 0, 0, size);
		return data[0];
	}

	/**
	 * Perform a recursive radius search on the Quad Tree and return an 
	 * ArrayList of all points in the quad tree that are within the circle
	 * generated by point (x,y) and radius.
	 * @param x The X coordinate of the center of the circle.
	 * @param y The Y coordinate of the center of the circle.
	 * @param radius The radius of the circle centered at (x,y).
	 * @param list The list to insert the found points into.
	 * @return The number of nodes examined in the search.
	 */
	@Override
	public int radius_search(int x, int y, int radius, List<Handle> list) {
		return root.radius_search(x, y, radius, list, 0, 0, size);
	}
	
	/**
	 * Get a string representation of the entire quad tree.
	 * @return A string representation of the quad tree.
	 */
	public String toString()
	{
		return root.toString();
	}

}
